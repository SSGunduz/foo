/**
 */
package Ticket.provider;

import Ticket.util.TicketAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TicketItemProviderAdapterFactory extends TicketAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TicketItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Urban} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrbanItemProvider urbanItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Urban}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrbanAdapter() {
		if (urbanItemProvider == null) {
			urbanItemProvider = new UrbanItemProvider(this);
		}

		return urbanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Standard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardItemProvider standardItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Standard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardAdapter() {
		if (standardItemProvider == null) {
			standardItemProvider = new StandardItemProvider(this);
		}

		return standardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.ExtraUrban} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtraUrbanItemProvider extraUrbanItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.ExtraUrban}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtraUrbanAdapter() {
		if (extraUrbanItemProvider == null) {
			extraUrbanItemProvider = new ExtraUrbanItemProvider(this);
		}

		return extraUrbanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.CityTicket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CityTicketItemProvider cityTicketItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.CityTicket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCityTicketAdapter() {
		if (cityTicketItemProvider == null) {
			cityTicketItemProvider = new CityTicketItemProvider(this);
		}

		return cityTicketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.TwoWay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TwoWayItemProvider twoWayItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.TwoWay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTwoWayAdapter() {
		if (twoWayItemProvider == null) {
			twoWayItemProvider = new TwoWayItemProvider(this);
		}

		return twoWayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.OneWay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OneWayItemProvider oneWayItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.OneWay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOneWayAdapter() {
		if (oneWayItemProvider == null) {
			oneWayItemProvider = new OneWayItemProvider(this);
		}

		return oneWayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.WeeklyPass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeeklyPassItemProvider weeklyPassItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.WeeklyPass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeeklyPassAdapter() {
		if (weeklyPassItemProvider == null) {
			weeklyPassItemProvider = new WeeklyPassItemProvider(this);
		}

		return weeklyPassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Luggage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LuggageItemProvider luggageItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Luggage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLuggageAdapter() {
		if (luggageItemProvider == null) {
			luggageItemProvider = new LuggageItemProvider(this);
		}

		return luggageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.CumulativeTickets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CumulativeTicketsItemProvider cumulativeTicketsItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.CumulativeTickets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCumulativeTicketsAdapter() {
		if (cumulativeTicketsItemProvider == null) {
			cumulativeTicketsItemProvider = new CumulativeTicketsItemProvider(this);
		}

		return cumulativeTicketsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.StandardCumulative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardCumulativeItemProvider standardCumulativeItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.StandardCumulative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardCumulativeAdapter() {
		if (standardCumulativeItemProvider == null) {
			standardCumulativeItemProvider = new StandardCumulativeItemProvider(this);
		}

		return standardCumulativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.CumulativeOneDay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CumulativeOneDayItemProvider cumulativeOneDayItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.CumulativeOneDay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCumulativeOneDayAdapter() {
		if (cumulativeOneDayItemProvider == null) {
			cumulativeOneDayItemProvider = new CumulativeOneDayItemProvider(this);
		}

		return cumulativeOneDayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Weekly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeeklyItemProvider weeklyItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Weekly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeeklyAdapter() {
		if (weeklyItemProvider == null) {
			weeklyItemProvider = new WeeklyItemProvider(this);
		}

		return weeklyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.FairTicket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FairTicketItemProvider fairTicketItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.FairTicket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFairTicketAdapter() {
		if (fairTicketItemProvider == null) {
			fairTicketItemProvider = new FairTicketItemProvider(this);
		}

		return fairTicketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.IntercityTicket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntercityTicketItemProvider intercityTicketItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.IntercityTicket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntercityTicketAdapter() {
		if (intercityTicketItemProvider == null) {
			intercityTicketItemProvider = new IntercityTicketItemProvider(this);
		}

		return intercityTicketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.SingleTicket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleTicketItemProvider singleTicketItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.SingleTicket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleTicketAdapter() {
		if (singleTicketItemProvider == null) {
			singleTicketItemProvider = new SingleTicketItemProvider(this);
		}

		return singleTicketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.MultiJourney} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiJourneyItemProvider multiJourneyItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.MultiJourney}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiJourneyAdapter() {
		if (multiJourneyItemProvider == null) {
			multiJourneyItemProvider = new MultiJourneyItemProvider(this);
		}

		return multiJourneyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.MultiDayTicket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiDayTicketItemProvider multiDayTicketItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.MultiDayTicket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiDayTicketAdapter() {
		if (multiDayTicketItemProvider == null) {
			multiDayTicketItemProvider = new MultiDayTicketItemProvider(this);
		}

		return multiDayTicketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Subscription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubscriptionItemProvider subscriptionItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Subscription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubscriptionAdapter() {
		if (subscriptionItemProvider == null) {
			subscriptionItemProvider = new SubscriptionItemProvider(this);
		}

		return subscriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Youth} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YouthItemProvider youthItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Youth}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYouthAdapter() {
		if (youthItemProvider == null) {
			youthItemProvider = new YouthItemProvider(this);
		}

		return youthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Child} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildItemProvider childItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Child}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildAdapter() {
		if (childItemProvider == null) {
			childItemProvider = new ChildItemProvider(this);
		}

		return childItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.Adult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdultItemProvider adultItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.Adult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdultAdapter() {
		if (adultItemProvider == null) {
			adultItemProvider = new AdultItemProvider(this);
		}

		return adultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Ticket.TicketSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TicketSystemItemProvider ticketSystemItemProvider;

	/**
	 * This creates an adapter for a {@link Ticket.TicketSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTicketSystemAdapter() {
		if (ticketSystemItemProvider == null) {
			ticketSystemItemProvider = new TicketSystemItemProvider(this);
		}

		return ticketSystemItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (personItemProvider != null) personItemProvider.dispose();
		if (urbanItemProvider != null) urbanItemProvider.dispose();
		if (standardItemProvider != null) standardItemProvider.dispose();
		if (extraUrbanItemProvider != null) extraUrbanItemProvider.dispose();
		if (cityTicketItemProvider != null) cityTicketItemProvider.dispose();
		if (twoWayItemProvider != null) twoWayItemProvider.dispose();
		if (oneWayItemProvider != null) oneWayItemProvider.dispose();
		if (weeklyPassItemProvider != null) weeklyPassItemProvider.dispose();
		if (luggageItemProvider != null) luggageItemProvider.dispose();
		if (cumulativeTicketsItemProvider != null) cumulativeTicketsItemProvider.dispose();
		if (standardCumulativeItemProvider != null) standardCumulativeItemProvider.dispose();
		if (cumulativeOneDayItemProvider != null) cumulativeOneDayItemProvider.dispose();
		if (weeklyItemProvider != null) weeklyItemProvider.dispose();
		if (fairTicketItemProvider != null) fairTicketItemProvider.dispose();
		if (intercityTicketItemProvider != null) intercityTicketItemProvider.dispose();
		if (singleTicketItemProvider != null) singleTicketItemProvider.dispose();
		if (multiJourneyItemProvider != null) multiJourneyItemProvider.dispose();
		if (multiDayTicketItemProvider != null) multiDayTicketItemProvider.dispose();
		if (subscriptionItemProvider != null) subscriptionItemProvider.dispose();
		if (youthItemProvider != null) youthItemProvider.dispose();
		if (childItemProvider != null) childItemProvider.dispose();
		if (adultItemProvider != null) adultItemProvider.dispose();
		if (ticketSystemItemProvider != null) ticketSystemItemProvider.dispose();
	}

}
